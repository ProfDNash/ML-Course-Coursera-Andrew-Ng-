import numpy as np
import matplotlib.pyplot as plt
from scipy.io import loadmat


#### Machine Learning Exercise 3 Part 2: Neural Networks ####

def displayData(X):#,example_width):  ##display 2D data in a nice grid
    fig, ax = plt.subplots()
    #plt.gray()
    m, n = np.shape(X)
    ## compute size of one example
    example_width = int(np.sqrt(n))  
    example_height = int(n/example_width)
    ## compute number of examples
    display_rows = int(np.floor(np.sqrt(m)))
    display_cols = int(np.ceil(m/display_rows))
    ##add padding between each image
    pad = 1
    ##setup blank display
    display_array = -np.ones((pad+display_rows*(example_height+pad), pad + display_cols*(example_width+pad)))
    ##copy each example into a patch in the display
    curr_ex=0
    for i in range(display_rows):
        for j in range(display_cols):
            if curr_ex>=m:
                break
            ##otherwise, copy the patch
            max_val=np.max(np.abs(X[curr_ex,:])) ##find max value in this example
            ex_start_ht=pad + i * (example_height + pad)
            ex_start_wd=pad + j * (example_width + pad)
            display_array[ex_start_ht:ex_start_ht + example_height, ex_start_wd:ex_start_wd+example_height] = X[curr_ex,:].reshape(example_height, example_width)/max_val
            curr_ex=curr_ex+1
        if curr_ex>=m:
            break
    plt.imshow(np.flipud(np.rot90(display_array))) ##rotated/flipped to get orientation right
    plt.show()
    

##Vectorized Sigmoid Function##
def sigmoid(z):
    return 1 / (1 + np.exp(- z))

## use a given value of theta to predict the label on each image##
def predict(theta1, theta2, X):
    m = X.shape[0]
    a1=np.append(np.matrix(np.ones(m)).transpose(),X,1) ##add a column of ones
    a2=sigmoid(np.matmul(a1,theta1.transpose()))
    a2=np.append(np.matrix(np.ones(a2.shape[0])).transpose(),a2,1) ##add a column of ones
    a3=sigmoid(np.matmul(a2,theta2.transpose()))
    p = np.amax(a3,axis=1) ##maximum probability
    g = np.where(a3==p)  ##location of max, i.e. label-1
    return g


##First read the data in and display a sample##
file = loadmat('ex3data1.mat')
X = file['X']
y = file['y']
m=X.shape[0]
X=np.matrix(X)
y=np.matrix(y)
rand_indicies = np.random.permutation(m)
sel=X[rand_indicies[1:100],:]

print('Plotting 100 sample characters. \n')
displayData(sel)

##Next load the weights for an already trained neural network##
input('\nProgram paused.  Press enter to continue.\n')
print('Loading Saved Neural Network Parameters...')
fileW = loadmat('ex3weights.mat')
Theta1 = fileW['Theta1']
Theta2 = fileW['Theta2']

##Prediction Accuracy
pred=predict(Theta1, Theta2, X)
print('Prediction accuracy on our training set is: ', np.mean(pred[1]+1==y.transpose())*100, '%')


##Now use neural network for predictions on random examples##
input('\nProgram paused.  Press enter to continue.\n')
#Randomly permute examples
rp=np.random.permutation(m)
for i in range(m):
    print('Displaying sample image \n')
    displayData(X[rp[i],:])
    
    pred = predict(Theta1, Theta2, X[rp[i],:])
    print('Neural Network prediction:', np.remainder(pred[1]+1,10))
    s=input('Paused - press enter to continue, or q to exit')
    if s=='q':
        break
