import numpy as np
import matplotlib.pyplot as plt
from scipy.io import loadmat


#### Machine Learning Exercise 8 Part 1: Anomaly Detection and Collaborative Filtering ####

##Estimate Gaussian Fit##
def estimateGaussian(X):
    m = X.shape[0]
    mu = np.sum(X,0)/m
    sigma2 = np.sum(np.power(X-mu, 2),0)/m ##sigma squared
    return mu, sigma2

##Multivariate Gaussian##
def multivariateGaussian(X, mu, Sigma2):
    k = len(mu)
    ##if sigma2 is a vector, then treat it as a diagonal covariance matrix##
    if Sigma2.shape==(Sigma2.shape[0],) or Sigma2.shape[0]==1 or Sigma2.shape[1]==1:
        Sigma2 = np.diag(Sigma2)
    X = X-mu
    p = (2*np.pi)**(-k/2)*np.linalg.det(Sigma2)**(-0.5)*np.exp(-0.5*np.sum(np.matmul(X, np.linalg.pinv(Sigma2))*X,1))
    return p

##Visualize Fit of Gaussian##
def visualizeFit(X, mu, sigma2):
    x1 = np.linspace(0, 35, 71)
    X1, X2 = np.meshgrid(x1,x1)
    Z = multivariateGaussian(np.append(X1.reshape((X1.size,1)), X2.reshape((X2.size,1)),1), mu, sigma2)
    Z = Z.reshape(X1.shape)
    plt.plot(X[:,0], X[:,1], 'x')
    ##do not plot if there are infinities##
    if np.isinf(Z).all() == False:
        levs = np.power(float(10),np.array([-20, -17, -14, -11, -8, -5, -2]))
        plt.contour(X1, X2, Z, levs)
        
##Select best threshold for selecting outliers##
def selectThreshold(yval, pval):
    bestEpsilon = 0
    bestF1 = 0
    F1 = 0
    stepsize = (np.max(pval) - np.min(pval))/1000
    for epsilon in np.arange(np.min(pval),np.max(pval),stepsize):
        pred = pval<epsilon
        pos = np.where(yval==1)[0]
        tp = np.sum(pred[pos])  ##true positives
        if np.sum(pred)!=0:
            prec = np.sum(tp)/np.sum(pred) ##precision is (true)/(predicted)
        else:
            prec = 0
        rec = np.sum(tp)/np.sum(yval)  ##recall is (true)/(actual)
        F1 = (2*prec*rec)/(prec+rec)
        if F1 > bestF1:
            bestF1=F1
            bestEpsilon=epsilon
    return bestEpsilon, bestF1


##Load and Visualize the Data##
print('Visualizing example dataset for outlier detection.')
file = loadmat('ex8data1.mat')
X = file['X']
Xval = file['Xval']
yval = file['yval']
plt.plot(X[:,0], X[:,1], 'x')
plt.xlabel('Latency (ms)')
plt.ylabel('Throughput (mb/s)')
plt.show()


##Estimate the Dataset Statistics##
input('\nProgram paused.  Press enter to continue.\n')
print('Visualizing Gaussian Fit')
##Estimate mu and sigma2##
mu, sigma2 = estimateGaussian(X)
##Return density of multivariate normal for each example##
p = multivariateGaussian(X,mu,sigma2)
##Visualize the Fit##
visualizeFit(X, mu, sigma2)
plt.show()

##Find Outliers##
input('\nProgram paused.  Press enter to continue.\n')
pval = multivariateGaussian(Xval, mu, sigma2)
epsilon, F1 = selectThreshold(yval, pval)
print('Best epsilon found using cross-validation: ', epsilon)
print('(this should be approximately 8.99e-05)')
print('Best F1 on Cross-validation set: ', F1)
print('(this should be approximately 0.875000)')
outliers = np.where(p<epsilon)[0]
plt.plot(X[:,0], X[:,1], 'x')
plt.plot(X[outliers,0], X[outliers,1], 'o', markerfacecolor='none', markeredgecolor='r')
plt.title('Outliers circled')
plt.xlabel('Latency (ms)')
plt.ylabel('Throughput (mb/s)')
plt.show()


##Multidimensional Outliers##
input('\nProgram paused.  Press enter to continue.\n')
print('Loading Dataset #2 and selecting optimal threshold.')
file2 = loadmat('ex8data2.mat')
X = file2['X']
Xval = file2['Xval']
yval = file2['yval']
mu, sigma2 = estimateGaussian(X)
p = multivariateGaussian(X, mu, sigma2)
pval = multivariateGaussian(Xval, mu, sigma2)
epsilon, F1 = selectThreshold(yval, pval)
print('Best epsilon found using cross-validation: ', epsilon)
print('(this should be approximately 1.38e-18)')
print('Best F1 on Cross-validation Set: ', F1)
print('(this should be approximately 0.615385)')
print('# of outliers found: ', np.sum(p<epsilon))
